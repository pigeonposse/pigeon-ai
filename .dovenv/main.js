
import { defineConfig } from '@dovenv/core'
import {
	getCurrentDir,
	getObjectFromJSONFile,
	joinPath,
	asciiFont,
	yaml,
	getObjectFrom,
} from '@dovenv/core/utils'
import pigeonposseTheme from '@dovenv/theme-pigeonposse'

import {
	getRepoRawUrl,
	getTemplates,
	trimToMaxWords,
} from './utils.js'

const currDir      = getCurrentDir( import.meta.url )
const workspaceDir = joinPath( currDir, '..' )
const pkg          = await getObjectFromJSONFile( joinPath( workspaceDir, 'package.json' ) )
const ghUserID     = pkg.extra.collective.id
const name         = pkg.extra.productName || pkg.name
const libraries    = pkg.extra.libraries
const sidebar      = [
	{
		text  : 'Introduction',
		items : [
			{
				text : `What is ${name}?`,
				link : `/guide/`,
			},
		],
	},
	{
		text  : 'Projects',
		items : libraries.map( l => ( {
			text : l.icon + ' ' + l.id,
			link : `/guide/${l.id}/`,
		} ) ),
	},
]
export default defineConfig(
	{
		name  : `${name} WORKSPACE`,
		desc  : `Dev ToolKit for "${name}" repository that uses the "dovenv" and "pigeonposse" theme.`,
		const : {
			pkg          : pkg,
			workspaceDir,
			mark         : `\n${asciiFont( `${pkg.extra.collective.id}\n-------\n${name}`, 'ANSI Shadow' )}\n`,
			libraries    : libraries,
			templateMark : `# Auto-generated by dovenv. Do not edit`,
		},
		transform : { 'pigeonposse.yml' : {
			input : [ './.pigeonposse.yml' ],
			fn    : async ( { const: c } ) => {

				const { pkg } = c
				const data    = { web : [
					{
						id          : pkg.name,
						name        : pkg.extra.productName,
						type        : 'documentation',
						subtypes    : [ 'ai', 'toolkit' ],
						version     : pkg.version,
						description : pkg.description,
						homepage    : pkg.homepage,
						repo        : pkg.repository.url,
						license     : pkg.extra.licenseURL,
						status      : 'active',
					},
				] }
				const res     = yaml.serialize( data )

				return c.templateMark + `\n` + res

			},
		} },
	},
	pigeonposseTheme( {
		workspaceDir,
		lint : {
			staged : { '*.{js,cjs,mjs,jsx,ts,cts,mts,tsx,json,yml,yaml}': 'dovenv lint eslint --silent' },
			eslint : { flags: [ '--fix' ] },
		},
		docs : {
			input  : './docs',
			styles : { color : {
				primary   : '#e10c68',
				secondary : '#fc8c2f',
				terciary  : '#1d9bf7',
				dark      : {
					bg     : '#000',
					bgAlt  : '#0b0b0d',
					bgSoft : '#0d0c10',
				},
			} },
			css : `
.vp-doc p:has( > a) {
    display: flex;
    gap: 10px;
}
				`,
			shortDesc : pkg.extra.shortDesc,
			name,
			license   : {
				type : pkg.license,
				url  : pkg.extra.licenseURL,
			},
			version : false,
			repoURL : pkg.repository.url,
			moreURL : pkg.extra.collective.url,
			footer  : { links : {
				web   : pkg.extra.collective.url,
				email : pkg.extra.collective.email,
				...pkg.extra.collective.social,
			} },
			sidebar : {
				'/guide/'       : sidebar,
				'/todo/'        : sidebar,
				'/contributors' : sidebar,
			},
			autoSidebar : {
				reference : false,
				intro     : false,
			},
			vitepress : { ignoreDeadLinks: true },
		},
		templates : {
			...getTemplates( ghUserID, libraries.map( l => l.id ) ),
			'docs-guide-index' : {
				input : `# What is ${name}?
${pkg.description}

## View more

{{const.docsGuideIndex}}
<!-- {{const.templateMark}} -->
`,
				output : './docs/guide/index.md',
				hook   : { before : async data => {

					let res = ''
					for ( const lib of data.const.libraries ) {

						const libPkg  = await getObjectFrom( getRepoRawUrl( ghUserID, lib.id, 'package.json' ) )
						const libName = libPkg.extra.productName || libPkg.name
						res          += `- ${lib.icon} [${libName}](./${lib.id}/index.md)\n`

					}

					data.const.docsGuideIndex = res

				} },
			},
			'docs-index' : {
				input : `---
{{const.templateMark}}

{{const.docsIndex}}
---
`,
				output : './docs/index.md',
				hook   : { before : async data => {

					const { pkg }      = data.const
					const layoutConfig = {
						layout : 'home',
						hero   : {
							name    : name,
							tagline : pkg.extra.shortDesc,
							text    : pkg.extra.action,
						},
						features : [],
					}
					for ( const lib of data.const.libraries ) {

						const libPkg = await getObjectFrom( getRepoRawUrl( ghUserID, lib.id, 'package.json' ) )

						layoutConfig.features.push( {
							title   : libPkg.extra.productName || libPkg.name,
							icon    : lib.icon,
							details : trimToMaxWords( libPkg.description, 12 ),
							link    : `/guide/${lib.id}`,
						} )

					}
					data.const.docsIndex = yaml.serialize( layoutConfig )

					return data

				} },
			},
		},
	} ),
)

